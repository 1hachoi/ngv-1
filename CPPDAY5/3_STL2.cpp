// 3_STL1 - 213 page
#include <iostream>
#include <vector>
#include <list>
#include <set> // Tree로 만들어진 자료구조 클래스
				// 균형잡힌 이진 트리로 되어 있습니다.

int main()
{
	// vector : 연속된 메모리 사용, 
	// 단점 : 중간 삽입 발생시 성능저하가 있음.
	// 장점 : 요소 순회가 빠르고, 캐쉬 적중률이 높다.						
	std::vector<int> v = { 1,2,3,4,5,6, 7, 8, 9, 10 };

	// list :  linked list 라는 자료 구조, 모든 요소가 분리된 메모리 사용
	// 장점 : 중간 삽입/삭제가 빠르다.
	// 단점 : 요소 순회가 느리고, 캐쉬 적중률이 낮다.
	std::list<int> s = { 1,2,3,4,5,6, 7, 8, 9, 10 };



	// 아래 처럼 초기화 해도 되고
	std::set<int> s1 = { 10,30,60,70,20 };
	std::set<int> s2; // 만든후에 넣어도 됩니다.
	s2.insert(50);
	s2.insert(30);
	s2.insert(60); // 루트 부터 크기를 비교해서 요소를 넣게 됩니다.
				  
	// set(tree) 의 특징
	// 장점 : 검색을 빠르게 할수 있다.
	// 단점 : 입력순서가 기록되지는 않는다.
}

// 11:15 분에 이어 집니다.



