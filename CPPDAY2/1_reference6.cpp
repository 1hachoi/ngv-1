// lvalue, rvalue - 46 page
// "need a lvalue"
// lvalue : 등호의 왼쪽에 놓일수 있는 표현식
// rvalue : 등호의 왼쪽에 놓일수 없는 표현식
int main()
{
	int n = 10; // 메모리 할당
				// n 이라는 이름으로 접근
//	int& r = n;
//	r = 10;
	// 등호의 왼쪽에 오려면 "사용자가 할당한 메모리가 있어야 합니다."
	n = 10;   // ok
//	20 = 10;  // error.

//	(n + 1) = 10;
	//-------------
	int x[5] = { 1,2,3,4,5 };

	int* p = x;

//	*(p + 1) = 10;  // ok. *(p+1)은 결국 사용자가 할당한 메모리가 된다.

//	p + 1 = 10;   // (p+1) 은 배열주소+1 로서, 실행시간 결정된 어떤 값(주소)
				// 이다. 할당한 메모리를 가리키는 것 아님.

	//-----------------
	int n2 = 10;
	int& r1 = n2;
	const int& r2 = n2;

	// n2, r1, r2 는 모두 사용자가 할당한 메모리를 가리키는 이름 입니다.
	n2 = 20; // ok
	r1 = 20; // ok
	r2 = 20; // error
	//---------------------------
	// C++에서 어려운 문법
	int& r3 = 10;       // error. rvalue(literal) 은 참조로 가리킬수 없습니다.
	const int& r4 = 10; // ok. 10을 가진 메모리를 만들고 가리킬수 있게 합니다.
	int&& r5 = 10;      // ok. C++11 부터 나온 문법
						// const 없이 literal 을 가리키는 문법(중급이후이야기)
	// int&  : lvalue reference
	// int&& : rvalue reference 라고 합니다.
}








